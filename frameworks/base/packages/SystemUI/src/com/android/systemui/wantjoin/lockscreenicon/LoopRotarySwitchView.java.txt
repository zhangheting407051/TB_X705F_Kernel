package com.android.systemui.wantjoin.lockscreenicon;

import android.animation.Animator;
import android.animation.ValueAnimator;
import android.app.ActivityManager;
import android.app.ActivityManagerNative;
import android.content.Context;
import android.content.pm.UserInfo;
import android.content.res.Configuration;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Parcelable;
import android.os.RemoteException;
import android.os.UserHandle;
import android.os.UserManager;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.GestureDetector;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationSet;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.TranslateAnimation;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import com.android.internal.util.UserIcons;
//import com.example.admin.avatartest.R;
import com.android.systemui.R;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;


/***
 * 水平旋转轮播控件
 */
public class LoopRotarySwitchView extends RelativeLayout {

    private  int LoopR = 86;

    private int ImageSize=80;

    private final static int horizontal = 1;//水平

    private int mOrientation = horizontal;//方向

    private Context mContext;//上下文

    private ValueAnimator restAnimator = null;//回位动画

    private ValueAnimator rAnimation = null;//半径动画

    private ValueAnimator zAnimation = null;

    private ValueAnimator xAnimation = null;

    private ValueAnimator yAnimation = null;

    private int loopRotationX = 0, loopRotationZ = 0, loopRotationY = 0;//x轴旋转和轴旋转，y轴无效果

    private GestureDetector mGestureDetector = null;//手势类

    private static int selectItem = 0;//当前选择项

    private int size = 0;//个数

    private float r = LoopR;//半径

    private float multiple = 2f;//倍数

    private float distance = multiple * r;//camera和观察的旋转物体距离， 距离越长,最大物体和最小物体比例越不明显

    private float angle = 0;    //旋转的角度

    private float last_angle = 0;    //最后的角度，用来记录上一次取消touch之后的角度

    private boolean autoRotation = false;//自动旋转

    private boolean touching = false;//正在触摸

    private AutoScrollDirection autoRotatinDirection = AutoScrollDirection.left; //默认自动滚动是从右往左

    private static List<View> views = new ArrayList<View>();//子view引用列表

    private OnLoopViewTouchListener onLoopViewTouchListener = null;//选择事件接口

    private boolean isCanClickListener = true;//是否可以点击回调

    private float x;//移动的x是否符合回调点击事件

    private float limitX = 30;//滑动倒最低30

    private int avatarTop;//头像上方位置

    private int avatarBottom;//头像下方位置

    private boolean isDrag=false;//是否正在拖拽

    private static List<Drawable> mListAvatar;//用户头像列表

    private static List<String> mListUserName = new ArrayList<>();//用户姓名列表

    private UserManager mUserManager;

    private boolean isFastSlid=false;

    private int myLoopR = 0;//快速滑动时的半径

    private boolean flag = false; //设置标记，当达到最大值时开始减速

    private int mUserId;//当前选中用户的用户ID

    private int marginBottom=0;//view距离下方位置

    private boolean mAddUsersWhenLocked = false; //由于锁屏界面改版，暂时停止使用
    //新增 返回用户Id接口
    private OnSelectUserListener mOnUserIdSelectListener = null;

    private int scrollTime=0;
    public enum AutoScrollDirection {
        left, right
    }
    //版本型号适配
    private static final String LENOVO_X705="TB-X705";   //p100f 与德
    private static final String LENOVO_X605="TB-X605";   //m10 x605 与德
    private static final String LENOVO_8704N="TB-8704";  //8 plus  龙旗	
    private static final String LENOVO_8504N="TB-8504";  //8 hd    龙旗
    private static final String LENOVO_X304F="TB-X304";  //10 hd   华勤
	private static final String LENOVO_7504="TB-7504";   //7 文泰
	private static final String LENOVO_7304="TB-7304";   //7 华勤196X
	private static final String LENOVO_8804="TB-8804";   //8 小新  龙旗
	private static final String LENOVO_TE510HAW="PC-TE510HAW";  //10 NEC  华勤
	private static final String LENOVO_TE508HAW="PC-TE508HAW";  //8 NEC  龙旗
	private static final String LENOVO_X804="TB-X804"; //10寸 小新 华勤
	private static final String LENOVO_8304="TB-8304"; //8寸 Attila4 Lite 华勤
	private static final String AOSP="AOSP on angler"; //华为 AOSP
	private static final String MSM_8953 = "msm8953";  //TAB5 第一代样机
	
    /**
     * 构造方法
     *
     * @param context
     */
    public LoopRotarySwitchView(Context context) {
        this(context, null);
    }

    /**
     * 构造方法
     *
     * @param context
     * @param attrs
     */
    public LoopRotarySwitchView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    /**
     * 构造方法
     *
     * @param context
     * @param attrs
     * @param defStyleAttr
     */
    private TypedArray typedArray;

    public LoopRotarySwitchView(Context context, AttributeSet attrs, int defStyleAttr) {

        super(context, attrs, defStyleAttr);
        this.mContext = context;
        if (Build.MODEL.contains(LENOVO_7304)) {
            setMinimumWidth(400);
        } else if (Build.MODEL.contains(LENOVO_7504)) {
            setMinimumWidth(500);
        } else if (Build.MODEL.contains(LENOVO_8304)) {
            setMinimumWidth(500);
        } else if (Build.MODEL.contains(AOSP)) {
            setMinimumWidth(1000);
        } else if (Build.MODEL.contains(MSM_8953)||Build.MODEL.contains(LENOVO_X705)) {
            setMinimumWidth(1000);
        } else if (Build.MODEL.contains(LENOVO_X605)) {
            setMinimumWidth(1000);
        } else {
            setMinimumWidth(800);
        }
        onCreateInit();
    }

    private void onCreateInit( ) {
        scrollTime=0;
        mAddUsersWhenLocked = Settings.Global.getInt(mContext.getContentResolver(),
                Settings.Global.ADD_USERS_WHEN_LOCKED, 0) != 0;

        LogUtil.e(TAG, "构造方法正在执行");
        if (Build.MODEL.contains(LENOVO_X705)||Build.MODEL.contains(MSM_8953)) {
            ImageSize = 120;
            LoopR = 129;
            marginBottom=100;
        }else if (Build.MODEL.contains(LENOVO_X605)) {
            ImageSize = 120;
            LoopR = 129;
            marginBottom=100;
        }else if (Build.MODEL.contains(LENOVO_X804)) {
            ImageSize = 120;
            LoopR = 129;
            marginBottom=100;
        }else if(Build.MODEL.contains(LENOVO_8704N)){
            ImageSize=160;
            LoopR=172;
            marginBottom=140;
        } else if (Build.MODEL.contains(LENOVO_8504N)) {
            ImageSize = 100;
            LoopR = 100;
            marginBottom=140;
        } else if (Build.MODEL.contains(LENOVO_X304F)) {
            ImageSize = 80;
            LoopR = 86;
            marginBottom=60;
        } else if (Build.MODEL.contains(LENOVO_7504)) {
            ImageSize = 100;
            LoopR = 100;
            marginBottom=100;
        } else if (Build.MODEL.contains(LENOVO_7304)){
            ImageSize = 80;
            LoopR = 86;
            marginBottom=60;
        } else if (Build.MODEL.contains(LENOVO_8304)) {
            ImageSize = 100;
            LoopR = 100;
            marginBottom = 100;
        } else if (Build.MODEL.contains(AOSP)) {
            ImageSize = 200;
            LoopR = 240;
            marginBottom = 140;
        } else {
            ImageSize = 160;
            LoopR = 172;
            marginBottom = 140;
        }
        mUserManager = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
        getDrawable();
        if (mListAvatar.size() == 2) {
            LoopR=60;
            angle=10000180;

        }
        sort();
        checkChildView();
        typedArray = mContext.obtainStyledAttributes(R.styleable.LoopRotarySwitchView);
        autoRotation = typedArray.getBoolean(R.styleable.LoopRotarySwitchView_autoRotation, false);
        r = typedArray.getDimension(R.styleable.LoopRotarySwitchView_r, LoopR);
        int direction = typedArray.getInt(R.styleable.LoopRotarySwitchView_direction, 0);
        typedArray.recycle();
        mGestureDetector = new GestureDetector(mContext, getGeomeryController());
        if (mOrientation == horizontal) {//如果是水平 z值为0  如果是竖直z值为90
            loopRotationZ = 0;
        } else {
            loopRotationZ = 90;
        }
        if (direction == 0) {//设置自定滚动的方向
            autoRotatinDirection = AutoScrollDirection.left;
        } else {
            autoRotatinDirection = AutoScrollDirection.right;
        }
        loopHandler.setLoop(autoRotation);
        setR(LoopR);
        for(int i =0;i<views.size();i++) {
            setImageSize(views.get(i),ImageSize);
        }

    }

    public void setOnSelectUserListener(OnSelectUserListener onUserIdSelectListener) {
        this.mOnUserIdSelectListener = onUserIdSelectListener;
    }

    /**
     * handler处理
     */
     LoopRotarySwitchViewHandler loopHandler = new LoopRotarySwitchViewHandler(20) {
        @Override
        public void doScroll() {
            try {
                LogUtil.e(TAG, "自动滑动开启了");
                if (mUserIdList.size() != 0) {//判断自动滑动从那边开始
                    int perAngle = 0;
                    switch (autoRotatinDirection) {
                        case left:
                            perAngle = 360 / mUserIdList.size();
                            break;
                        case right:
                            perAngle = -360 / mUserIdList.size();
                            break;
                    }

                    if (angle == 360) {
                        angle = 0f;
                    }
                    LogUtil.e(TAG, "lalalalallalalalala");
                    AnimRotationTo(angle + perAngle, null);
                    if (ii >= 20 && !flag) {
                        loopHandler.setLoopTime(ii -= 1);
                        myLoopR += 2;
                        setR((((float) myLoopR / 100 + 1)) * LoopR);
                    } else {
                        flag = true;
                        loopHandler.setLoopTime(ii += 1);
                        if (myLoopR > 0) {
                            myLoopR -= 2;
                            setR((((float) myLoopR / 100 + 1)) * LoopR);
                        } else {
                            setR(LoopR);
                        }
                    }

//                    LogUtil.e(TAG, "myLoopR===" + ((float) myLoopR / 100 + 1));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    };

    /**
     * 排序
     * 對子View 排序，然后根据变化选中是否重绘,这样是为了实现view 在显示的时候来控制当前要显示的是哪三个view，可以改变排序看下效果
     *
     * @param list
     */
    @SuppressWarnings("unchecked")
    private <T> void sortList(List<View> list) {

        @SuppressWarnings("rawtypes")
        Comparator comparator = new SortComparator();
        T[] array = list.toArray((T[]) new Object[list.size()]);

        Arrays.sort(array, comparator);
        int i = 0;
        ListIterator<T> it = (ListIterator<T>) list.listIterator();
        while (it.hasNext()) {
            it.next();
            it.set(array[i++]);
        }
        for (int j = 0; j < list.size(); j++) {
            list.get(j).bringToFront();
        }
    }

    /**
     * 筛选器
     */
    private class SortComparator implements Comparator<View> {
        @Override
        public int compare(View lhs, View rhs) {
            int result = 0;
            try {
                result = (int) (1000 * rhs.getScaleX() - 1000 * lhs.getScaleX());
            } catch (Exception e) {
            }
            return result;
        }
    }

    /**
     * 手势
     *
     * @return
     */
    private int ii = 100;//控制快速转动时候的速度
    private float currentAngle;
    private int currentItem;
    private boolean isScroll=false;
    private boolean hasRestPosotion=false;
    private GestureDetector.SimpleOnGestureListener getGeomeryController() {
        return new GestureDetector.SimpleOnGestureListener() {
            @Override
            public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
                isScroll = true;
		scrollTime=300;
//                LogUtil.e(TAG, "onScroll");
//                LogUtil.e(TAG, "selectItem==========" + selectItem);
                if (!isDrag&&size>1) {
                    hasRestPosotion=true;
                    angle += Math.cos(Math.toRadians(loopRotationZ)) * (distanceX / views.size())
                            + Math.sin(Math.toRadians(loopRotationZ)) * (distanceY / views.size());
                    Log.e(TAG, "angle=" + angle);
//                    if (angle < 0) {
//                        angle-=Math.cos(Math.toRadians(loopRotationZ)) * (distanceX / views.size())
//                                + Math.sin(Math.toRadians(loopRotationZ)) * (distanceY / views.size());
//                    }
                    initView();
                }
                return true;
            }
        };
    }

    private void initView() {
//        LogUtil.e(TAG, "height=" + getHeight() / 2 + "width=" + getWidth() / 2);
//        LogUtil.e(TAG, "views.X=" + views.get(selectItem).getX());
        for (int i = 0; i < views.size(); i++) {
            if (size == 0) {
                size = mListAvatar.size();
            }
            if (calculateItem() < 0) {
                selectItem = calculateItem() + size;
            } else {
                selectItem = calculateItem();
            }
            double radians = angle + 180 - i * 360 / size;
            float x0 = (float) Math.sin(Math.toRadians(radians)) * r;
            float y0 = (float) Math.cos(Math.toRadians(radians)) * r;
            float scale0 = (distance - y0) / (distance + r);//计算子view之间的比例，可以看到distance越大的话 比例越小，也就是大小就相差越小
            float scale1 = (distance - y0 * 1.8f) / (distance + r);//计算子view之间的比例，用于设置透明度
            if (size == 2 && i != selectItem) {
                float size=(distance - y0) / (distance/3 + r);
                if (size > 1) {
                    size=1f;
                }
                views.get(i).setScaleX(size);//对view进行缩放
                views.get(i).setScaleY(size);//对view进行缩放
                views.get(i).setAlpha((distance - y0)*1.5f / (distance/2 + r));//对View进行虚化
                Log.e(TAG, "Size=" + (distance - y0) / (distance / 3 + r));
            } else if(size>4&&i!=selectItem) {
                // TODO: 2017/2/17
                views.get(i).setScaleX(scale0/3f*2.5f);//对view进行缩放
                views.get(i).setScaleY(scale0/3f*2.5f);//对view进行缩放
                views.get(i).setAlpha(scale1/3f*2.2f);//对View进行虚化
            }else {
                views.get(i).setScaleX(scale0);//对view进行缩放
                views.get(i).setScaleY(scale0);//对view进行缩放
                views.get(i).setAlpha(scale1);//对View进行虚化
            }

//            LogUtil.e(TAG, mUserIdList.get(i)+"========x0:" + x0 + ",y0:" + y0);
//            LogUtil.e(TAG, "views.get"+i+"ViewX" + views.get(i).getX());
            int countitemX1;//选中item的右一个item
            int countitemX2;//选中item的左一个item
//            LogUtil.e(TAG, "selectItem===============" + selectItem);
            if(selectItem+1==size){
                countitemX1=0;
            } else {
                countitemX1 = selectItem+1;
            }
            if (selectItem - 1 < 0) {
                countitemX2 = size - 1;
            } else {
                countitemX2 = selectItem - 1;
            }
            //若大于4个，则只显示当前用户和他的邻居三个头像
            if (size > 4) {
                if (i != selectItem &&i!=countitemX1&&i!=countitemX2) {
                    views.get(i).setVisibility(GONE);
                }  else {
                    views.get(i).setVisibility(VISIBLE);
                }
            }


//            avatarTop=views.get(selectItem).getTop();
//            avatarBottom=views.get(selectItem).getBottom();
            float rotationX_y = (float) Math.sin(Math.toRadians(loopRotationX * Math.cos(Math.toRadians(radians)))) * r;
            float rotationZ_y = -(float) Math.sin(Math.toRadians(-loopRotationZ)) * x0;
            float rotationZ_x = (((float) Math.cos(Math.toRadians(-loopRotationZ)) * x0) - x0);
            views.get(i).setTranslationX(x0 + rotationZ_x);
            views.get(i).setTranslationY(rotationX_y + rotationZ_y);
            if (getR() > LoopR) {
                setImageSize(views.get(i),(int) ((getR() / LoopR) * ImageSize));

            } else {
                setImageSize(views.get(i),ImageSize);
            }
        }

        postInvalidate();
    }



    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
//        initView();
        if (autoRotation) {
            loopHandler.sendEmptyMessageDelayed(LoopRotarySwitchViewHandler.msgid, loopHandler.loopTime);
        }
        LogUtil.e(TAG, "onSizeChanged");
    }
    private boolean isChecked=true;
    int otherleft ;
    int otherright;
    int othertop ;
    int otherbottom;


    int multi_user;
    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        super.onLayout(changed, l, t, r, b);
        //如果非当前Item应旋转至右侧停止！参考复位
//        if (isChecked) {
        if (size == 2) {
            otherleft = views.get(0).getLeft();
            //设置偏移位置
            if (Build.MODEL.contains(LENOVO_X705)||Build.MODEL.contains(MSM_8953)) {
                otherright=views.get(0).getRight()+50;
            }else if(Build.MODEL.contains(LENOVO_X605)){
                otherright=views.get(0).getRight()+50;
            }else if(Build.MODEL.contains(LENOVO_X804)){
                otherright=views.get(0).getRight()+50;
            } else if (Build.MODEL.contains(LENOVO_X304F)) {
                otherright=views.get(0).getRight()-30;
                } else if (Build.MODEL.contains(LENOVO_8704N)) {
                otherright = views.get(0).getRight()+120;
            } else if (Build.MODEL.contains(AOSP)) {
                otherright = views.get(0).getRight() + 150;
            } else {
                otherright = views.get(0).getRight();
            }
            othertop = views.get(0).getTop();
            otherbottom = views.get(0).getBottom();
//            isChecked = false;
//        }
             for(int i =0;i<mUserIdList.size();i++) {
                if (i != selectItem) {
//                    Log.e(TAG, "后排需放在右侧");
//                    LoopR=62;
                    views.get(i).layout(otherleft, othertop,otherright+LoopR*3+LoopR/2,otherbottom);
//                    setImageSize(views.get(i), ImageSize);
                } else {
//                    Log.e(TAG, "旋转Item在旋转时应旋转到右侧");
                }
            }
        }
        if (size > 4) {

            int countitemX1;//选中item的右一个item
            int countitemX2;//选中item的左一个item
//            LogUtil.e(TAG, "selectItem===============" + selectItem);
            if(selectItem+1==size){
                countitemX1=0;
            } else {
                countitemX1 = selectItem+1;
            }
            if (selectItem - 1 < 0) {
                countitemX2 = size - 1;
            } else {
                countitemX2 = selectItem - 1;
            }
            //若大于4个，则只显示当前用户和他的邻居三个头像

            otherleft = views.get(selectItem).getLeft();
            otherright = views.get(selectItem).getRight();
            othertop = views.get(selectItem).getTop();
            otherbottom = views.get(selectItem).getBottom();
            //设置偏移位置
            if (Build.MODEL.contains(LENOVO_X705)||Build.MODEL.contains(MSM_8953)) {
                multi_user=40;
            } else if(Build.MODEL.contains(LENOVO_X605)){
                multi_user=40;
            }else if(Build.MODEL.contains(LENOVO_X804)){
                multi_user=40;
            }else if (Build.MODEL.contains(LENOVO_X304F)) {
                multi_user=50;
            }
            else if (Build.MODEL.contains(LENOVO_8704N)) {
                multi_user=50;
            } else {
                multi_user=50;
            }
            othertop = views.get(selectItem).getTop();
            otherbottom = views.get(selectItem).getBottom();
//            isChecked = false;
//        }
             for(int i =0;i<mUserIdList.size();i++) {
                if (i==countitemX1) {
//                    Log.e(TAG, "后排需放在右侧");
//                    LoopR=62;
                    views.get(i).layout(otherleft, othertop,otherright+multi_user,otherbottom);
//                    setImageSize(views.get(i), ImageSize);
                } else if( i==countitemX2){
                    views.get(i).layout(otherleft-multi_user,othertop,otherright,otherbottom);
//                    Log.e(TAG, "旋转Item在旋转时应旋转到右侧");
                }
            }
        }
        if (changed) {
//            if (mOnUserIdSelectListener != null) {
//                if (views.size() != 0) {
//                    UserInfo userInfo = mUserManager.getUserInfo(mUserId);
//                    mOnUserIdSelectListener.selected(userInfo, views.get(selectItem));
//                }
//            }
            RAnimation();
        }


    }
    private boolean isAlreadyAnimation=false;

    /**
     * 开始动画
     */
    public void RAnimation() {
            RAnimation(LoopR, LoopR);
        LogUtil.e(TAG, "RAnimation");
    }

    public void RAnimation(boolean fromZeroToLoopR) {
        if (fromZeroToLoopR) {
            RAnimation(r, LoopR);
        } else {
            RAnimation(LoopR, 1f);
        }
    }

    public void RAnimation(float from, float to) {

        isAlreadyAnimation=true;
        rAnimation = ValueAnimator.ofFloat(from, to);
        rAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                r = (Float) valueAnimator.getAnimatedValue();
                initView();
            }
        });
        rAnimation.setInterpolator(new DecelerateInterpolator());
        rAnimation.setDuration(2000);
        rAnimation.start();
    }

    @Override
    protected Parcelable onSaveInstanceState() {
        return super.onSaveInstanceState();
    }

    /**
     * 初始化view
     */
    private ImageView mUserAvatar;

    public void checkChildView() {
        LogUtil.e(TAG, "checkChildView");
        //先清空views里边可能存在的view防止重复
        views.clear();
        size = mListAvatar.size();

        for (int i = 0; i < mListAvatar.size(); i++) {
            LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
//            LogUtil.e(TAG, "userId:"+mUserIdList.get(i));
            final View view = inflater.inflate(R.layout.wantjoin_item_user, null);
            mUserAvatar = (ImageView) view.findViewById(R.id.ivAvatar);
            mUserAvatar.setImageDrawable(mListAvatar.get(i));
            mUserAvatar.getHeight();
            LogUtil.e(TAG, "muserAvatarHeigh=" + getHeight());
            setImageSize(mUserAvatar, ImageSize);
            addView(mUserAvatar);
            views.add(mUserAvatar);

            setSelectItem(i);
            setSelectUserId(mUserIdList.get(i));

        }

    }


    /**
     * 复位
     */
    private void restPosition() {

        Log.e(TAG, "restPosition");
        if (size == 0) {
            return;
        }
        float finall = 0;
        float part = (float)360 / size;//一份的角度
        if (angle < 0) {
            part = -part;
        }
        float minvalue = ((int) (angle / part)) * part;//最小角度
        float maxvalue = ((int)(angle / part)) * part +part;//最大角度
//        float minvalue = angle;//最小角度
//        float maxvalue = angle+part;//最大角度
        LogUtil.e(TAG, "minvalue=" + minvalue);
        LogUtil.e(TAG, "maxvalue=" + maxvalue);
        if (angle >= 0) {//分为是否小于0的情况
            if (angle - last_angle > 0) {
                finall = maxvalue;
            } else {
                finall = minvalue;
            }
        } else {
            if (angle - last_angle < 0) {
                finall = maxvalue;
            } else {
                finall = minvalue;
            }
        }
//        finall = finall + ((float) 360 / (float) size - 51) * count;
        LogUtil.e(TAG, "finall====" + finall);
        AnimRotationTo(finall, null);


    }

    private boolean isStop=true;
    public  boolean isStop() {
        return this.isStop;
    }

    private boolean ctrlId = true;
    private int oldItem;
    private boolean right=true;
    private boolean left=false;
    private int lastUserId;
    final String[] aa = new String[1];
    /**
     * 动画
     *
     * @param finall
     * @param complete
     */
    private boolean  abc=false;
    private void AnimRotationTo(float finall, final Runnable complete) {
        LogUtil.e(TAG," AnimRotationTo()");
        if (angle == finall) {//如果相同说明不需要旋转
            LogUtil.e(TAG, "return");
            return;
        }
        restAnimator = ValueAnimator.ofFloat(angle, finall);
        Log.e(TAG, "angle=" + angle + ",finall=" + finall);

        restAnimator.setInterpolator(new DecelerateInterpolator());//设置旋转减速插值器
        restAnimator.setDuration(scrollTime);
        restAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                if (touching == false) {
                    angle = (Float) animation.getAnimatedValue();
                    abc = true;
                    initView();
                    abc = false;
//                    if (isStop) {
//                        LogUtil.e(TAG, "%%%%%%%%%%%%%%%%%%%%%");
//                    }

                }
            }
        });
        restAnimator.addListener(new Animator.AnimatorListener() {
            @Override
            public void onAnimationStart(Animator animation) {
//                isScrllStop = false;
//                if (isFastSlid() && isStop) {
                    String aaa = animation.toString();
                    aa[0] =aaa;
//                }
            }

            @Override
            public void onAnimationEnd(Animator animation) {
                if (touching == false) {
                    if (calculateItem() < 0) {
                        selectItem = calculateItem() + size;
                    } else {
                        selectItem = calculateItem();
                    }
                    mUserId = mUserIdList.get(selectItem);
                    if (mOnUserIdSelectListener != null && views.size() != 0&&mBTouch) {
                        UserInfo userInfo = mUserManager.getUserInfo(mUserId);
                        if (userInfo != null) {
                            mOnUserIdSelectListener.selected(userInfo, views.get(selectItem));
                        }
                    }
                }
            }

            @Override
            public void onAnimationCancel(Animator animation) {
                LogUtil.e(TAG, "AnimationCancel");

            }

            @Override
            public void onAnimationRepeat(Animator animation) {
                LogUtil.e(TAG, "onAnimationRepeat");
            }
        });

        if (complete != null) {
            restAnimator.addListener(new Animator.AnimatorListener() {
                @Override
                public void onAnimationStart(Animator animation) {

                }

                @Override
                public void onAnimationEnd(Animator animation) {
                    complete.run();
                }

                @Override
                public void onAnimationCancel(Animator animation) {

                }

                @Override
                public void onAnimationRepeat(Animator animation) {

                }
            });
        }
        restAnimator.start();
        LogUtil.e(TAG, "stop");
    }

    /**
     * 通过角度计算是第几个item
     *
     * @return
     */
    private int calculateItem() {
        return (int) (angle / (360 / size)) % size;
    }

    /**
     * 触摸操作
     *
     * @param event
     * @return
     */
//    int userid;
//    int i=1;
    private boolean mBTouch = false;
    private boolean onTouch(MotionEvent event) {
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            last_angle = angle;
            touching = true;
            loopHandler.setLoop(false);
            flag = false;
            isStop = true;
            isFastSlid = false;
            ctrlId = true;
            setR(LoopR);
            for(int i =0;i<views.size();i++) {
               setImageSize(views.get(i),ImageSize);
            }
            mBTouch = true;
        }
        boolean sc = mGestureDetector.onTouchEvent(event);
        if (sc) {
            this.getParent().requestDisallowInterceptTouchEvent(true);//通知父控件勿拦截本控件
        }
        if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {
            touching = false;
            if (hasRestPosotion) {
                restPosition();
                LogUtil.e(TAG, "我被重置了");
            }
            hasRestPosotion = false;
            currentAngle = angle;
            isScroll = false;
            return true;
        }

        return true;
    }

    public static boolean ctrlTouch = false;


    /**
     * 触摸方法
     *
     * @param event
     * @return
     */
    float x1 = 0;
    float x2 = 0;
    float y1 = 0;
    float y2 = 0;
    @Override
    public boolean onTouchEvent(MotionEvent event) {

        float fAlpha = getAlpha();
        if (onLoopViewTouchListener != null) {
            onLoopViewTouchListener.onTouch(event);
        }
        isCanClickListener(event);
        Log.e(TAG, "isScroll=" + isScroll);
        if(event.getAction() == MotionEvent.ACTION_DOWN) {
            //当手指按下的时候
            x1 = event.getX();
            y1 = event.getY();
        }
        if(event.getAction() == MotionEvent.ACTION_UP) {
            //当手指离开的时候
            x2 = event.getX();
            y2 = event.getY();
            if (Math.abs(y1 - y2) < 10 && Math.abs(x1 - x2) < 10) {
                mOnSwitchViewCLickListener.selected();
            }
        }
        return true;
    }


    /**
     * 触摸停止计时器，抬起设置可下啦刷新
     */
    @Override
    public boolean dispatchTouchEvent(MotionEvent ev) {

        onTouch(ev);
        if (onLoopViewTouchListener != null) {
            onLoopViewTouchListener.onTouch(ev);
        }
        isCanClickListener(ev);
        return super.dispatchTouchEvent(ev);
    }


    /**
     * 是否可以点击回调
     *
     * @param event
     */
    public void isCanClickListener(MotionEvent event) {
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                x = event.getX();
                if (autoRotation) {
                    loopHandler.removeMessages(LoopRotarySwitchViewHandler.msgid);
                }
                break;
            case MotionEvent.ACTION_MOVE:
                break;
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_CANCEL:
                if (autoRotation) {
                    loopHandler.sendEmptyMessageDelayed(LoopRotarySwitchViewHandler.msgid, loopHandler.loopTime);
                }
                if (event.getX() - x > limitX || x - event.getX() > limitX) {
                    isCanClickListener = false;
                } else {
                    isCanClickListener = true;
                }
                break;
        }
    }

    /**
     * 获取所有的view
     *
     * @return
     */
    public List<View> getViews() {
        return views;
    }

    /**
     * 获取角度
     *
     * @return
     */
    public float getAngle() {
        return angle;
    }


    /**
     * 设置角度
     *
     * @param angle
     */
    public void setAngle(float angle) {
        this.angle = angle;
    }

    /**
     * 获取距离
     *
     * @return
     */
    public float getDistance() {
        return distance;
    }

    /**
     * 设置距离
     *
     * @param distance
     */
    public void setDistance(float distance) {
        this.distance = distance;
    }

    /**
     * 获取半径
     *
     * @return
     */
    public float getR() {
        return r;
    }

    /**
     * 获取选择是第几个item
     *
     * @return
     */
    public  int getSelectItem() {
        return selectItem;
    }

    /**
     * 设置选中方法
     *
     * @param selectItem
     */
    public void setSelectItem(int selectItem) {

        if (selectItem >= 0) {
            float jiaodu = 0;
            if (getSelectItem() == 0) {
                if (selectItem == views.size() - 1) {
                    jiaodu = angle - (360 / size);
                } else {
                    jiaodu = angle + (360 / size);
                }
            } else if (getSelectItem() == views.size() - 1) {
                if (selectItem == 0) {
                    jiaodu = angle + (360 / size);
                } else {
                    jiaodu = angle - (360 / size);
                }
            } else {
                if (selectItem > getSelectItem()) {
                    jiaodu = angle + (360 / size);
                } else {
                    jiaodu = angle - (360 / size);
                }
            }

            float finall = 0;
            float part = 360 / size;//一份的角度
            if (jiaodu < 0) {
                part = -part;
            }
            float minvalue = (int) (jiaodu / part) * part;//最小角度
            float maxvalue = (int) (jiaodu / part) * part;//最大角度
            if (jiaodu >= 0) {//分为是否小于0的情况
                if (jiaodu - last_angle > 0) {
                    finall = maxvalue;
                } else {
                    finall = minvalue;
                }
            } else {
                if (jiaodu - last_angle < 0) {
                    finall = maxvalue;
                } else {
                    finall = minvalue;
                }
            }

            if (size > 0) {
//                LogUtil.e(TAG, "setSelectItme======finall====" + finall);
                //控制停留角度
                AnimRotationTo(finall, null);
            }
        }
    }

    /**
     * 设置半径
     *
     * @param r
     */
    public LoopRotarySwitchView setR(float r) {
        this.r = r;
        distance = multiple * r;
        return this;
    }


    /**
     * 设置是否自动切换
     *
     * @param autoRotation
     */
    public LoopRotarySwitchView setAutoRotation(boolean autoRotation) {
        this.autoRotation = autoRotation;
        loopHandler.setLoop(autoRotation);
        return this;
    }

    /**
     * 获取自动切换时间
     *
     * @return
     */
    public long getAutoRotationTime() {
        return loopHandler.loopTime;
    }

    /**
     * 设置自动切换时间间隔
     *
     * @param autoRotationTime
     */
    public LoopRotarySwitchView setAutoRotationTime(long autoRotationTime) {
        loopHandler.setLoopTime(autoRotationTime);
        return this;
    }

    /**
     * 是否自动切换
     *
     * @return
     */
    public boolean isAutoRotation() {
        return autoRotation;
    }

    /**
     * 设置倍数
     *
     * @param mMultiple 设置这个必须在setR之前调用，否则无效
     * @return
     */
    public LoopRotarySwitchView setMultiple(float mMultiple) {
        this.multiple = mMultiple;
        return this;
    }

    public LoopRotarySwitchView setAutoScrollDirection(AutoScrollDirection mAutoScrollDirection) {
        this.autoRotatinDirection = mAutoScrollDirection;
        return this;
    }

    public void createXAnimation(int from, int to, boolean start) {
        if (xAnimation != null) if (xAnimation.isRunning() == true) xAnimation.cancel();
        xAnimation = ValueAnimator.ofInt(from, to);
        xAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                loopRotationX = (Integer) animation.getAnimatedValue();
                initView();
            }
        });
        xAnimation.setInterpolator(new DecelerateInterpolator());
        xAnimation.setDuration(2000);
        if (start) xAnimation.start();
    }


    public ValueAnimator createZAnimation(int from, int to, boolean start) {
        if (zAnimation != null) if (zAnimation.isRunning() == true) zAnimation.cancel();
        zAnimation = ValueAnimator.ofInt(from, to);
        zAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                loopRotationZ = (Integer) animation.getAnimatedValue();
                initView();
            }
        });
        zAnimation.setInterpolator(new DecelerateInterpolator());
        zAnimation.setDuration(2000);
        if (start) zAnimation.start();
        return zAnimation;
    }

    public void createYAnimation(int from, int to, boolean start) {
        if (yAnimation != null) if (yAnimation.isRunning() == true) yAnimation.cancel();
        yAnimation = ValueAnimator.ofInt(from, to);
        yAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                loopRotationY = (Integer) animation.getAnimatedValue();
                initView();
            }
        });
        yAnimation.setInterpolator(new DecelerateInterpolator());
        yAnimation.setDuration(2000);
        if (start) yAnimation.start();
    }

    /**
     * 设置方向
     *
     * @param mOrientation
     * @return
     */
    public LoopRotarySwitchView setOrientation(int mOrientation) {
        setHorizontal(mOrientation == horizontal, false);
        return this;
    }

    public LoopRotarySwitchView setHorizontal(boolean horizontal, boolean anim) {
        if (anim) {
            if (horizontal) {
                createZAnimation(getLoopRotationZ(), 0, true);
            } else {
                createZAnimation(getLoopRotationZ(), 90, true);
            }
        } else {
            if (horizontal) {
                setLoopRotationZ(0);
            } else {
                setLoopRotationZ(90);
            }
            initView();
        }
        return this;
    }

    public LoopRotarySwitchView setLoopRotationX(int loopRotationX) {
        this.loopRotationX = loopRotationX;
        return this;
    }

    public LoopRotarySwitchView setLoopRotationZ(int loopRotationZ) {
        this.loopRotationZ = loopRotationZ;
        return this;
    }

    public int getLoopRotationX() {
        return loopRotationX;
    }

    public int getLoopRotationZ() {
        return loopRotationZ;
    }

    public ValueAnimator getRestAnimator() {
        return restAnimator;
    }

    public ValueAnimator getrAnimation() {
        return rAnimation;
    }

    public void setzAnimation(ValueAnimator zAnimation) {
        this.zAnimation = zAnimation;
    }

    public ValueAnimator getzAnimation() {
        return zAnimation;
    }

    public void setxAnimation(ValueAnimator xAnimation) {
        this.xAnimation = xAnimation;
    }

    public ValueAnimator getxAnimation() {
        return xAnimation;
    }

    private static final String TAG = LoopRotarySwitchView.class.getSimpleName();
    /**
     * 获取用户头像
     */
    private List<Integer> mUserIdList;
    private void getDrawable() {
//        List<UserInfo> users = mUserManager.getUsers(true);
        List<UserInfo> users = getUserOrder(mContext);
        boolean hasGuest = false;
        Map<String, Object> user;
        mListAvatar = new ArrayList<>();
        mUserIdList = new ArrayList<>();
        int guestId = 0;
        for (UserInfo userInfo : users) {
            if (userInfo.isManagedProfile()) {
                continue;
            }
            if (userInfo.isGuest()) {
                hasGuest=true;
                guestId=userInfo.id;
                    continue;
            } else {
                user = new HashMap<String, Object>();
                user.put("pk", userInfo.id);
                user.put("name", userInfo.name);
                LogUtil.e(TAG, "userInfo.id = " + userInfo.id);
            }
            mListUserName.add(userInfo.name);
            LogUtil.e(TAG, "userInfo="+userInfo.id );
            if (userInfo.id != UserHandle.myUserId()) {
                mListAvatar.add(getUserIcon(getContext(), mUserManager, userInfo));
                mUserIdList.add(userInfo.id);
            }
        }
        UserInfo userInfo = mUserManager.getUserInfo(UserHandle.myUserId());
//        临时屏蔽
        mAddUsersWhenLocked = Settings.Global.getInt(mContext.getContentResolver(),
                Settings.Global.ADD_USERS_WHEN_LOCKED, 0) != 0;

        if (!userInfo.isGuest()&&!userInfo.isKid()&&hasGuest)        //打开开关，显示guest用户，孟祥生
         {
            Bitmap bitmap = UserIcons.convertToBitmap(UserIcons.getDefaultUserIcon(-10000, false));
            Drawable drawable = CircleFramedDrawable.getInstance(getContext(), bitmap);
            mListAvatar.add(drawable);
            mUserIdList.add(guestId);
        }
        if (userInfo.isGuest()) {
            Bitmap bitmap = UserIcons.convertToBitmap(UserIcons.getDefaultUserIcon(-10000, false));
            Drawable drawable = CircleFramedDrawable.getInstance(getContext(), bitmap);
            mListAvatar.add(drawable);
            mUserIdList.add(userInfo.id);
        } else {
            mListAvatar.add(getUserIcon(getContext(),mUserManager,userInfo));
            mUserIdList.add(userInfo.id);
        }


        LogUtil.e(TAG, mListAvatar.size() + "," + mListAvatar);
    }

    //    private static int a;

    /**
     * 通过用户得到用户头像
     * @param context
     * @param um
     * @param user
     * @return
     */
    public static Drawable getUserIcon(Context context, UserManager um, UserInfo user) {
        if (user.isManagedProfile()) {
            // We use predefined values for managed profiles
            Bitmap b = BitmapFactory.decodeResource(context.getResources(),
                    com.android.internal.R.drawable.ic_corp_icon);
            return CircleFramedDrawable.getInstance(context, b);
        }
        if (user.iconPath != null) {
            Bitmap icon = um.getUserIcon(user.id);
            if (icon != null) {
                return CircleFramedDrawable.getInstance(context, icon);
            }
        }
        return CircleFramedDrawable.getInstance(context, UserIcons.convertToBitmap(
                UserIcons.getDefaultUserIcon(user.id, /* light= */ false)));
    }


    /**
     * 长按上移事件处理
     */
    private OnTouchListener movingEventListener = new OnTouchListener() {
        int lastX, lastY;

        @Override
        public boolean onTouch(View v, MotionEvent event) {

            DisplayMetrics dm = getResources().getDisplayMetrics();
            int screenWidth = dm.widthPixels;
            int screenHeight = dm.heightPixels - 50;
            Configuration mConfiguration = getContext().getResources().getConfiguration(); //获取设置的配置信息
            int ori = mConfiguration.orientation ; //获取屏幕方向
            switch (event.getAction()) {
                case MotionEvent.ACTION_DOWN:
//                    LogUtil.e(TAG, "selectItem=" + selectItem);
                    lastX = (int) event.getRawX();
                    lastY = (int) event.getRawY();
                    break;
                case MotionEvent.ACTION_MOVE:
                    isDrag = true;
                    for(int i=0;i<views.size();i++) {
                        if (!views.get(i).equals(v)) {
                            views.get(i).setVisibility(GONE);
                        }
                    }
                    int dx = (int) event.getRawX() - lastX;
                    int dy = (int) event.getRawY() - lastY;

                    int left = v.getLeft() + dx;
                    int top = v.getTop() + dy;
                    int right = v.getRight() + dx;
                    int bottom = v.getBottom() + dy;
                    // 设置不能出界
                    if (left < v.getLeft()) {
                        left = v.getLeft();
                        right = v.getRight();
                    }
                    if (right > v.getRight()) {
                        right = v.getRight();
                        left = v.getLeft();
                    }
                    if(ori == mConfiguration.ORIENTATION_LANDSCAPE){
                        //横屏
                        if (top < 200) {
                            top = 200;
                            bottom = top + v.getHeight();
                        }
                    }else{
                        //竖屏
                        if (top < 0) {
                            top = 0;
                            bottom = top + v.getHeight();
                        }
                    }

                    if (bottom > v.getBottom()) {
                        bottom = v.getBottom();
                        top = bottom - v.getHeight();
                    }

                    v.layout(left, top, right, bottom);

                    lastX = (int) event.getRawX();
                    lastY = (int) event.getRawY();
//                    LogUtil.e(TAG, "lastX:" + lastX + ",lastY:" + lastY);
//                    LogUtil.e(TAG, "v.getHeight" + v.getHeight());
                    break;
                case MotionEvent.ACTION_UP:
                    isDrag = false;

                    int turnplace;
                    int lastplace;
                    if(ori == mConfiguration.ORIENTATION_LANDSCAPE){
                        //横屏
                        turnplace = 525;
                        lastplace = 200;
                    }else{
                        //竖屏
                        turnplace=930;
                        lastplace=0;
                    }
                    LogUtil.e(TAG, "lastY=" + lastY);
                    if (lastY <= turnplace) {
                        v.layout(v.getLeft(),lastplace,v.getRight(),v.getHeight()+lastplace);
//                        Log.e(getContext(), "到达指定位置");
                    } else {
                        for(int i=0;i<views.size();i++) {
                            if (!views.get(i).equals(v)) {
                                views.get(i).setVisibility(VISIBLE);
                            }
                        }
                        v.layout(v.getLeft(),avatarTop,v.getRight(),avatarBottom);
                        initView();
                    }
                    isScroll = true;
                    ctrlTouch = false;
                    break;
            }
            return true;
        }
    };

    /**
     * 设置图片大小位置
     * @param view
     * @param size
     */
    private void setImageSize(View view, int size) {
        LayoutParams layoutParams9 = new LayoutParams(size, size);
        layoutParams9.height = size;//设置图片的高度
        layoutParams9.width = size; //设置图片的宽度
        layoutParams9.setMargins(0,0,0,marginBottom);
        view.setLayoutParams(layoutParams9);
    }

    public void setSelectUserId(int userId) {
        this.mUserId = userId;
    }
    private int getSelectUserId() {
        return mUserId;
    }


    public  boolean isFastSlid() {
        return this.isFastSlid;
    }

    /**
     * translateAnimation结束后调用
     */
    @Override
    protected void onAnimationEnd() {
        super.onAnimationEnd();
        LogUtil.e(TAG, "onAnimationEnd");
        LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        final View view = inflater.inflate(R.layout.wantjoin_item_user, null);
        mUserAvatar = (ImageView) view.findViewById(R.id.ivAvatar);
        List<UserInfo> users = mUserManager.getUsers(true);
        mListAvatar.add(getUserIcon(getContext(),mUserManager,users.get(users.size()-1)));
        mUserAvatar.setImageDrawable(mListAvatar.get(mListAvatar.size()-1));
        views.add(mUserAvatar);
    }

    public  void userIconFloat() {
        for(int i=0;i<mListAvatar.size();i++) {
            if (i != selectItem) {
                LogUtil.e(TAG, "i=============" + i);
                views.get(i).setVisibility(GONE);
            }

        }
        AnimationSet animationSet = new AnimationSet(true);
        TranslateAnimation translateAnimation = new TranslateAnimation(0, 0, 0, -500);
        translateAnimation.setAnimationListener(new AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationEnd(Animation animation) {
                views.get(selectItem).setVisibility(GONE);
                //处理动画后事件
                switchUserNow(mUserId);
            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }
        });
        animationSet.addAnimation(translateAnimation);
        views.get(selectItem).startAnimation(animationSet);
        translateAnimation.setDuration(500);
    }
    public void switchUserNow(int userId) {
        try {
            ActivityManagerNative.getDefault().switchUser(userId);
        } catch (RemoteException re) {
            // Nothing to do
        }
    }

    public void update(int currentUserId){
	scrollTime=0;
        //
        if (Build.MODEL.contains(LENOVO_X705)||Build.MODEL.contains(MSM_8953)) {
            ImageSize = 120;
            LoopR = 129;
            marginBottom=100;
        }else if (Build.MODEL.contains(LENOVO_X605)) {
            ImageSize = 120;
            LoopR = 129;
            marginBottom=100;
        }else if (Build.MODEL.contains(LENOVO_X804)) {
            ImageSize = 120;
            LoopR = 129;
            marginBottom=100;
        }else if(Build.MODEL.contains(LENOVO_8704N)){
            ImageSize=160;
            LoopR=172;
            marginBottom=140;
        } else if (Build.MODEL.contains(LENOVO_8504N)) {
            ImageSize = 100;
            LoopR = 100;
            marginBottom=140;
        } else if (Build.MODEL.contains(LENOVO_X304F)) {
            ImageSize = 80;
            LoopR = 86;
            marginBottom=60;
            Log.e(TAG, "6666666666");
        } else if (Build.MODEL.contains(LENOVO_7504)) {
            ImageSize = 100;
            LoopR = 100;
            marginBottom=100;
        } else if (Build.MODEL.contains(LENOVO_7304)){
            ImageSize = 80;
            LoopR = 86;
            marginBottom=60;
        } else if (Build.MODEL.contains(LENOVO_8304)) {
            ImageSize = 100;
            LoopR = 100;
            marginBottom = 100;
        } else if (Build.MODEL.contains(AOSP)) {
            ImageSize = 200;
            LoopR = 240;
            marginBottom = 140;
        } else {
            ImageSize = 160;
            LoopR = 172;
            marginBottom = 140;
        }
        views.clear();
        LogUtil.e(TAG, "清空前的mListAvatar.size=======" + mListAvatar.size());
        LogUtil.e(TAG, "清空前的mUserIdList.size=======" + mUserIdList.size());
        mUserIdList.clear();
        mListAvatar.clear();
        angle=0;
        isFastSlid = false;
        mBTouch = false;
        LogUtil.e(TAG, "views.size=======================" + views.size());
        LogUtil.e(TAG, "清空后的mListAvatar.size=======" + mListAvatar.size());
        LogUtil.e(TAG, "清空后的mUserIdList.size=======" + mUserIdList.size());
        removeAllViews();
//临时测试
//        List<UserInfo> users = mUserManager.getUsers(true);
        List<UserInfo> users = getUserOrder(mContext);
        boolean hasGuest = false;
        int guestId = 0;
        Map<String, Object> user;
        mListAvatar = new ArrayList<>();
        mUserIdList = new ArrayList<>();
        for (UserInfo userInfo : users) {
            if (userInfo.isManagedProfile()) {
                continue;
            }
            if (userInfo.isGuest()) {
                hasGuest=true;
                guestId=userInfo.id;
                    continue;
            } else {
                user = new HashMap<String, Object>();
                user.put("pk", userInfo.id);
                user.put("name", userInfo.name);
                LogUtil.e(TAG, "userInfo.id = " + userInfo.id);
            }
            mListUserName.add(userInfo.name);
            LogUtil.e(TAG, "userInfo="+userInfo.id );
            if (userInfo.id != currentUserId) {
                mListAvatar.add(getUserIcon(getContext(), mUserManager, userInfo));
                mUserIdList.add(userInfo.id);
            }
        }
        UserInfo userInfo = mUserManager.getUserInfo(currentUserId);

        //临时屏蔽
        mAddUsersWhenLocked = Settings.Global.getInt(mContext.getContentResolver(),
                Settings.Global.ADD_USERS_WHEN_LOCKED, 0) != 0;

        if (!userInfo.isGuest()&&!userInfo.isKid()&&hasGuest){
            Bitmap bitmap = UserIcons.convertToBitmap(UserIcons.getDefaultUserIcon(-10000, false));
            Drawable drawable = CircleFramedDrawable.getInstance(getContext(), bitmap);
            mListAvatar.add(drawable);
            mUserIdList.add(guestId);
        }

        if (userInfo.isGuest()) {
            Bitmap bitmap = UserIcons.convertToBitmap(UserIcons.getDefaultUserIcon(-10000, false));
            Drawable drawable = CircleFramedDrawable.getInstance(getContext(), bitmap);
            mListAvatar.add(drawable);
            mUserIdList.add(userInfo.id);
        } else {
            mListAvatar.add(getUserIcon(getContext(),mUserManager,userInfo));
            mUserIdList.add(userInfo.id);
        }
        LogUtil.e(TAG, mListAvatar.size() + "," + mListAvatar);
        if (mListAvatar.size() == 2) {
            LoopR=60;
            angle=10000180;
        }
	sort();
        checkChildView();
        setR(LoopR);
        for(int i =0;i<views.size();i++) {
            setImageSize(views.get(i),ImageSize);
        }
        initView();
//        aaa();
    }
    private void sort() {
        //排序
        if (mListAvatar.size()>1&&mListAvatar.size() % 2 == 0) {
            mListAvatar.add(mListAvatar.get(0));
            mListAvatar.remove(0);
            mUserIdList.add(mUserIdList.get(0));
            mUserIdList.remove(0);
        }
    }

    //新增 返回用户Id接口
    private OnFastLoopStopListener mOnFastLoopStopListener = null;

    public void OnFastLoopStopListener(OnFastLoopStopListener onFastLoopStopListener) {
        this.mOnFastLoopStopListener = onFastLoopStopListener;
    }
    private OnSwitchViewClickListener mOnSwitchViewCLickListener=null;
    public void OnSwitchViewClickListener(OnSwitchViewClickListener mOnSwitchViewCLickListener) {
        this.mOnSwitchViewCLickListener = mOnSwitchViewCLickListener;
    }

    private void getAvatar(int left) {
        UserInfo userInfo = mUserManager.getUserInfo(31);
        if (userInfo.isGuest()) {
            Bitmap bitmap = UserIcons.convertToBitmap(UserIcons.getDefaultUserIcon(-10000, false));
            Drawable drawable = CircleFramedDrawable.getInstance(getContext(), bitmap);
            mListAvatar.add(1,drawable);
            mUserIdList.add(1,userInfo.id);
        } else {
            mListAvatar.add(1,getUserIcon(getContext(),mUserManager,userInfo));
            mUserIdList.add(1,userInfo.id);
        }




        if (left == 0) {
            removeView(views.get(1));
            views.remove(1);
            LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            final View view = inflater.inflate(R.layout.wantjoin_item_user, null);
            mUserAvatar = (ImageView) view.findViewById(R.id.ivAvatar);
            mUserAvatar.setImageDrawable(mListAvatar.get(1));
            addView(mUserAvatar);
            views.add(2,mUserAvatar);
        }
    }




    public static class LogUtil {

        private static boolean mbLoggable = true;

        public static void setLoggable(boolean bLoggable)
        {
            mbLoggable = bLoggable;
        }

        public static boolean isLoggable()
        {
            return mbLoggable;
        }

        public static boolean isDebuggable()
        {
            return mbLoggable;
        }

        public static int i(String tag, String msg) {
            if (!mbLoggable)
                return -1;
            return Log.i(tag, msg);
        }

        public static int i(String tag, String msg, Throwable tr) {
            if (!mbLoggable)
                return -1;
            return Log.i(tag, msg, tr);
        }

        public static int d(String tag, String msg) {
            if (!mbLoggable)
                return -1;
            return Log.d(tag, msg);
        }

        public static int d(String tag, String msg, Throwable tr) {
            if (!mbLoggable)
                return -1;
            return Log.d(tag, msg, tr);
        }

        public static int e(String tag, String msg) {
            if (!mbLoggable)
                return -1;
            return Log.e(tag, msg);
        }

        public static int e(String tag, String msg, Throwable tr) {
            if (!mbLoggable)
                return -1;
            return Log.e(tag, msg, tr);
        }

        public static int w(String tag, String msg, Throwable tr) {
            if (!mbLoggable)
                return -1;
            return Log.w(tag, msg, tr);
        }

        public static int w(String tag, String msg) {
            if (!mbLoggable)
                return -1;
            return Log.w(tag, msg);
        }
    }


    /**
     * 遍历用户，得到用户顺序的List<UserInfo>集合，
     * 顺序为：当前用户(当前登录用户为非机主情况)-机主-一般用户-儿童用户-访客
     * @param context
     * @return
     */
    public static List<UserInfo> getUserOrder(Context context) {
        UserManager mUserManager = (UserManager) context.getSystemService(Context.USER_SERVICE);
        List<UserInfo> users = mUserManager.getUsers(true);
        List<UserInfo> orderUserInfo = new ArrayList<>();
        for (UserInfo userInfo : users) {
            if (userInfo.id == UserHandle.myUserId()) {
                orderUserInfo.add(userInfo);
            }
        }
        for (UserInfo userInfo : users) {
            if (userInfo.isAdmin()&&userInfo.id != UserHandle.myUserId()) {
                orderUserInfo.add(userInfo);
                break;
            }
        }
        for (UserInfo userInfo : users) {
            if (!userInfo.isGuest()&&!userInfo.isAdmin()&&!userInfo.isKid() && !userInfo.isKid()
                    &&userInfo.id != UserHandle.myUserId()) {
                orderUserInfo.add(userInfo);
            }
        }
        for (UserInfo userInfo : users) {
            Log.e(TAG, "getUserOrder " + userInfo.name + " " + userInfo.flags + " userInfo.isKid() is " + userInfo.isKid() + " userInfo.isKid() is " + userInfo.isKid());
            if ((userInfo.isKid() || userInfo.isKid()) &&userInfo.id != UserHandle.myUserId()) {
                orderUserInfo.add(userInfo);
            }
        }
        for (UserInfo userInfo : users) {
            if (userInfo.isGuest()&&userInfo.id != UserHandle.myUserId()) {
                orderUserInfo.add(userInfo);
            }
        }
        Log.e(TAG, "users======" + users);
        Log.e(TAG, "orderUserInfo======" + orderUserInfo);
        return orderUserInfo;
    }
    //临时屏蔽
//新增，如果窗口发生变化，自行更新
    @Override
    protected void onVisibilityChanged(@NonNull View changedView, int visibility) {
        super.onVisibilityChanged(changedView, visibility);
//        //临时屏蔽
////        if (visibility == VISIBLE) {
//        update(ActivityManager.getCurrentUser());
//        Log.e(TAG, "内部更新");
////        }
        if(visibility == View.VISIBLE)
        {
            int i = 0;
            ++i;

        }
        else if(visibility == View.GONE)
        {
            int i = 0;
            ++i;

        }
        else if(visibility == View.INVISIBLE){
            int i = 0;
            ++i;
        }
    }


    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    }

    @Override
    protected void onWindowVisibilityChanged(int visibility) {
        super.onWindowVisibilityChanged(visibility);
    }

}