/*
 * This program is protected under international and U.S. copyright laws as
 * an unpublished work. These changes are confidential and proprietary to the
 * copyright owners. Reproduction or disclosure, in whole or in part, or the
 * production of derivative works therefrom without the express permission of
 * the copyright owners is prohibited.
 *
 *                Copyright (C) 2017-2018 by Dolby Laboratories,
 *                            All rights reserved.
 */

package com.android.systemui.qs.tiles;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.provider.Settings;
import android.service.quicksettings.Tile;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManagerPolicy;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
import com.android.systemui.Dependency;
import com.android.systemui.plugins.ActivityStarter;
import com.android.systemui.plugins.qs.DetailAdapter;
import com.android.systemui.plugins.qs.QSTile.BooleanState;
import com.android.systemui.qs.QSHost;
import com.android.systemui.qs.tileimpl.QSTileImpl;
import com.android.systemui.R;
import com.android.systemui.qs.QSDetailItems;
import com.android.systemui.qs.QSDetailItems.Item;
import com.android.systemui.statusbar.policy.DolbyAudioController;

import com.dolby.dax.DolbyAudioEffect;

public class DolbyAudioTile extends QSTileImpl<BooleanState>{
    private static final String TAG = "DolbyAudioTile";

    private static final Intent DAX_PROFILE_SETTINGS = new Intent("com.dolby.LAUNCH_DS_APP");
    private final DaxProfileDetailAdapter mDaxProfileDetailAdapter;
    private Profile mProfiles[] = null;
    private final DolbyAudioController mController;
    private final Callback mCallback = new Callback();
    private boolean mHdmiPlugin = false;
    private final ActivityStarter mActivityStarter;
    private static final int mProfileNum = 4;

    private final class Callback implements DolbyAudioController.Callback{
        @Override
        public void updateDolbyTileUI() {
            refreshState();
            if (isShowingDetail()) {
                mDaxProfileDetailAdapter.updateItems();
            }
        }
    };

    private String[] getProfileNames() {
        String profileNames[] = new String[mProfileNum];
        profileNames[0] = mContext.getString(R.string.accessibility_desc_dolby_dynamic);
        profileNames[1] = mContext.getString(R.string.accessibility_desc_dolby_movie);
        profileNames[2] = mContext.getString(R.string.accessibility_desc_dolby_music);
        profileNames[3] = mContext.getString(R.string.accessibility_desc_dolby_custom);
        return profileNames;
    }

    public DolbyAudioTile(QSHost host) {
        super(host);

        mController = Dependency.get(DolbyAudioController.class);
        mActivityStarter = Dependency.get(ActivityStarter.class);
        mDaxProfileDetailAdapter = (DaxProfileDetailAdapter) createDetailAdapter();

        // create default set of presets
        mProfiles = new Profile[mProfileNum];
        mProfiles[0] = new Profile(R.drawable.dolby_dynamicon, R.drawable.dolby_dynamicoff, 0);
        mProfiles[1] = new Profile(R.drawable.dolby_movieon, R.drawable.dolby_movieoff, 1);
        mProfiles[2] = new Profile(R.drawable.dolby_musicon, R.drawable.dolby_musicoff, 2);
        mProfiles[3] = new Profile(R.drawable.dolby_customon, R.drawable.dolby_customoff, 3);

        // register hdmi plugged intent
        IntentFilter dolbyIntentFilter = new IntentFilter();
        dolbyIntentFilter.addAction(WindowManagerPolicy.ACTION_HDMI_PLUGGED);
        mContext.registerReceiver(mDolbyIntentReceiver, dolbyIntentFilter);
    }

    @Override
    public CharSequence getTileLabel() {
        return mContext.getString(R.string.accessibility_quick_settings_dolby);
    }

    @Override
    public Intent getLongClickIntent() {
        return DAX_PROFILE_SETTINGS;
    }

    @Override
    public BooleanState newTileState() {
        return new BooleanState();
    }

    @Override
    public DetailAdapter getDetailAdapter() {
        return mDaxProfileDetailAdapter;
    }

    public void handleSetListening(boolean listening) {
        if (listening) {
            mController.addCallback(mCallback);
        } else {
            mController.removeCallback(mCallback);
        }
    }

    @Override
    public int getMetricsCategory() {
        return MetricsEvent.QS_COLORINVERSION;
    }

    @Override
    protected DetailAdapter createDetailAdapter() {
        return new DaxProfileDetailAdapter();
    }

    @Override
    protected void handleClick() {
        mController.swapDolbyState();
    }

    @Override
    protected void handleSecondaryClick() {
        if (mHdmiPlugin) {
            mActivityStarter.postStartActivityDismissingKeyguard(
                    new Intent(DAX_PROFILE_SETTINGS), 0);
            return;
        }
        showDetail(true);
    }

    @Override
    protected void handleUpdateState(BooleanState state, Object arg) {
        state.icon = ResourceIcon.get(R.drawable.ic_qs_dolby_dis);
        state.label = mContext.getString(R.string.accessibility_desc_dolby_dis);
        state.dualTarget = true;

        if (mHdmiPlugin) {
            state.icon = ResourceIcon.get(R.drawable.ic_qs_dolby_dis);
            state.label = mContext.getString(R.string.accessibility_desc_dolby_dis);
            showDetail(false);
            return;
        }

        int daxState = mController.getDolbyState();
        state.value = (daxState == 1) ? true : false;
        switch (daxState) {
       //fix Bug#TABFIVEP-1938 mahui01@wind-mobi.com 2018/7/9 begin
        case 0:
            state.icon = ResourceIcon.get(R.drawable.ic_qs_dolby_dis);
            state.label = mContext.getString(R.string.accessibility_desc_dolby_dis);
            state.contentDescription = mContext.getString( R.string.accessibility_desc_dolby_off);
            break;
        case 1:
            state.icon = ResourceIcon.get(R.drawable.ic_qs_dolby_on);
            int selectedProfile = mController.getDolbyProfile();
            String[] mProfileNames = getProfileNames();
            state.label = mProfileNames[selectedProfile];
           state.contentDescription = mContext.getString( R.string.accessibility_desc_dolby_on);
            break;
        case 2:
            state.icon = ResourceIcon.get(R.drawable.ic_qs_dolby_dis);
            state.label = mContext.getString(R.string.accessibility_desc_dolby_dis);
            break;
            //fix Bug#TABFIVEP-1938 mahui01@wind-mobi.com 2018/7/9 end
        }
        state.state = state.value ? Tile.STATE_ACTIVE : Tile.STATE_INACTIVE;
        //fix Bug#TABFIVEP-1939 mahui01@wind-mobi.com 2018/7/13 begin
        state.dualLabelContentDescription = mContext.getString(R.string.accessibility_desc_dolby_dolby_atmos);
        //fix Bug#TABFIVEP-1939 mahui01@wind-mobi.com 2018/7/13 end
    }

    private final class DaxProfileDetailAdapter implements DetailAdapter, QSDetailItems.Callback {
        private QSDetailItems mItems;

        @Override
        public CharSequence getTitle() {
            return mContext.getString(R.string.accessibility_quick_settings_dolby);
        }

        public Intent getSettingsIntent() {
            return DAX_PROFILE_SETTINGS;
        }

        @Override
        public Boolean getToggleState() {
            return mState.value;
        }

        @Override
        public void setToggleState(boolean state) {
            mController.swapDolbyState();
        }

        @Override
        public int getMetricsCategory() {
            return MetricsEvent.QS_COLORINVERSION;
        }

        @Override
        public View createDetailView(Context context, View convertView, ViewGroup parent) {
            mItems = QSDetailItems.convertOrInflate(context, convertView, parent);
            mItems.setTagSuffix("Dolby");
            mItems.setCallback(this);
            updateItems();
            setItemsVisible(true);
            return mItems;
        }

        public void setItemsVisible(boolean visible) {
            if (mItems == null) return;
            mItems.setItemsVisible(visible);
        }

        private void updateItems() {
            if (mItems == null) return;

            int daxState = mController.getDolbyState();
            boolean state = (daxState == 1) ? true : false;
            if (!state) {
                mItems.setEmptyState(R.drawable.dolby_symbol_off_detailpage,
                        R.string.accessibility_desc_dolby_dolby_atmos_off);
                mItems.setItems(null);
                return;
            }

            Item[] items = new Item[mProfileNum];

            for (int i = 0; i < mProfiles.length; i++){
                final Item item = new Item();
                String[] profileNames = getProfileNames();
                final boolean selected = (i == mController.getDolbyProfile());
                item.icon = mProfiles[i].getIcon(selected);
                item.line1 = profileNames[i];
                item.tag = mProfiles[i];
                items[i] = item;
             }
             mItems.setItems(items);
         }

         @Override
         public void onDetailItemClick(Item item) {
             if (item == null || item.tag == null) return;
             if (!mState.value) return;
             final Profile mProfile = (Profile) item.tag;
             if(mProfile.mPosition == -1 || mProfile.mPosition == mController.getDolbyProfile()) {
                return;
             }

             if (mController != null) {
                 mController.setDolbyProfile(mProfile.mPosition);
             }

             updateItems();
         }

        @Override
        public void onDetailItemDisconnect(Item item) {
            // noop
        }
     }

    public class Profile {
        private int mIconSelected, mIconNormal, mPosition;

        public Profile(int iconSelected, int iconNormal, int position) {
            mIconSelected = iconSelected;
            mIconNormal = iconNormal;
            mPosition = position;
        }

        public int getIcon(boolean selected) {
            return selected ? mIconSelected : mIconNormal;
        }
    }

    /** Broadcast receive to determine if there is a DS access right change. */
    private BroadcastReceiver mDolbyIntentReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (action.equals(WindowManagerPolicy.ACTION_HDMI_PLUGGED)) {
                mHdmiPlugin = intent.getBooleanExtra("state", false);
                refreshState();
            }
        }
    };
}
