package com.android.gallery3d.filtershow.ui;

import android.content.Context;
import android.content.res.Configuration;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.util.Log;
import android.util.TypedValue;
import android.view.MotionEvent;
import android.view.View;

import com.android.gallery3d.util.ScreenUtils;

import org.codeaurora.gallery.R;

import java.util.ArrayList;
import java.util.List;

public class FilterShowWheelView extends View {

    private static final String TAG = "FilterShowWheelView";

    private final int ALPHA_START = 30;
    private final int ALPHA_END = 100;
    private final int LEFT_STRAIGHTENANGLE_MAX = 45;
    private final int RIGHT_LEFT_STRAIGHTENANGLE_MAX = -45;

    private List<RectangleItem> mRectangleItems = new ArrayList<RectangleItem>();
    private UpdateStarightenListener mUpdataStraightenListener;
    private Paint mPaint;
    private Rect mBound;
    private Context mContext;
    private String mTitleText;

    private float rectPointerHeight = 0;
    private float rectTriangleHeight = 0;
    private float rectWidth = 0;
    private float rectHeight = 0;
    private float lastX;
    private float heightGap = 0;

    private int colorId[] = new int[2];
    private int rectNumber = 0;
    private int mTitleTextColor;
    private int mTitleTextSize;
    private int mStraightenCount = 0;
    private boolean isCurrentView = false;

    public FilterShowWheelView(Context context) {
        this(context, null);
    }

    public FilterShowWheelView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public FilterShowWheelView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        mContext = context;
        TypedArray array = context.getTheme().obtainStyledAttributes(attrs, R.styleable.CustomScaleView, defStyleAttr, 0);
        int n = array.getIndexCount();
        for (int i = 0; i < n; i++) {
            int attr = array.getIndex(i);
            switch (attr) {
                case R.styleable.CustomScaleView_scaleText:
                    mTitleText = array.getString(attr);
                    break;
                case R.styleable.CustomScaleView_scaleTextColor:
                    mTitleTextColor = array.getColor(attr, mContext.getColor(R.color.wheel_rectangle_white));
                    break;
                case R.styleable.CustomScaleView_scaleTextSize:
                    mTitleTextSize = array.getDimensionPixelSize(attr, (int) TypedValue.applyDimension(
                            TypedValue.COMPLEX_UNIT_SP, 16, getResources().getDisplayMetrics()));
                    break;
            }
        }
        array.recycle();
        mPaint = new Paint();
        mPaint.setTextSize(mTitleTextSize);
        mBound = new Rect();
        mPaint.getTextBounds(mTitleText, 0, mTitleText.length(), mBound);
    }

    public void setCurrentView(boolean currentView){
        isCurrentView = currentView;
        mTitleTextColor = mContext.getColor(R.color.wheel_pointer_blue);//bug:A6001-1506-huangjian-001 20170223 add
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (!isCurrentView) {
            return super.onTouchEvent(event);//bug:A6091-1916-huangjian-001 20170422 modify
        }
        switch (event.getAction()) {
            case MotionEvent.ACTION_POINTER_DOWN:
                break;
            case MotionEvent.ACTION_DOWN:
                lastX = event.getX();
                break;
            case MotionEvent.ACTION_UP:
                checkPosition();
                lastX = 0;
                break;
            case MotionEvent.ACTION_MOVE:
                float nowX = event.getX();
                if (nowX < lastX) {
                    if ((lastX - nowX) > rectWidth) {
                        updateAngle(mStraightenCount);
                        if (mStraightenCount < LEFT_STRAIGHTENANGLE_MAX) {
                            changeColor();
                            mStraightenCount ++;
                        }
                    }
                } else if (nowX > lastX) {
                    if ((nowX - lastX) > rectWidth) {
                        updateAngle(mStraightenCount);
                        if (mStraightenCount > RIGHT_LEFT_STRAIGHTENANGLE_MAX) {
                            changeColor();
                            mStraightenCount --;
                        }
                    }
                }
                lastX = nowX;
                break;
        }
        return true;
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        initRectBean(MeasureSpec.getSize(widthMeasureSpec));
    }

    private void initRectBean(int width) {
        if (width == 0) return;
        initWheelProperty(width);
        rectNumber = (int) (width / rectWidth);
        if (rectNumber % 2 == 0) {
            rectNumber--;
            rectWidth = width / rectNumber;
        }
        if ((rectNumber - 1) / 2 % 2 == 0) {
            colorId[0] = R.color.wheel_rectangle_white;
            colorId[1] = R.color.wheel_rectangle_black;
        } else {
            colorId[0] = R.color.wheel_rectangle_black;
            colorId[1] = R.color.wheel_rectangle_white;
        }
        for (int i = 0; i < rectNumber; i++) {
            RectangleItem rect = new RectangleItem();
            rect.setRectColor(colorId[i % 2]);
            int left = (int) ((i * rectWidth) + ((rectNumber % 2 == 0) ? rectWidth / 2 : 0));
            int top  = (int) (6 * rectWidth);
            int right = (int) ((i + 1) * rectWidth + ((rectNumber % 2 == 0) ? rectWidth / 2 : 0));
            int bottom = (int) rectHeight;

            Rect rect1 = new Rect(left,top,right,bottom);
            if (i % 2 != 0) {
                int alpha = 0;
                if (i < rectNumber / 2) {
                    alpha = ALPHA_START + (ALPHA_END - ALPHA_START) / (rectNumber / 2) * i;
                } else {
                    alpha = ALPHA_START + (ALPHA_END - ALPHA_START) / (rectNumber / 2) * (rectNumber - i - 1);
                }
                rect.setRectAlpha(alpha);
            } else {
                rect.setRectAlpha(ALPHA_END);
            }
            rect.setRect(rect1);
            mRectangleItems.add(rect);
        }
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (useCompact(mContext)) {
            mPaint.setColor(mContext.getColor(R.color.land_filtershow_background));
        } else {
            mPaint.setColor(mContext.getColor(R.color.land_main_panel_background));
        }
        canvas.drawRect(0, 0, getMeasuredWidth(), getMeasuredHeight(), mPaint);

        for (RectangleItem rectangleItem : mRectangleItems) {
            drawRect(rectangleItem, canvas);
        }

        mPaint.setColor(mTitleTextColor);

        canvas.drawRect(new Rect((int)(this.getWidth() / 2 - rectWidth / 2), (int)(2 * rectWidth), (int)(this.getWidth() / 2 + rectWidth / 2), (int)rectPointerHeight), mPaint);
        float y = getWidth() / 4 + rectWidth * 6 - rectWidth / 2;
        canvas.drawText(mTitleText, this.getWidth() / 2 - rectWidth, this.getWidth() / 4 + rectWidth * 6 - rectWidth / 2 + heightGap * 2, mPaint);//bug:A6001-1542-huangjian-001 20170318 modify

        Path path = new Path();
        path.moveTo(this.getWidth() / 2, rectPointerHeight + rectWidth);
        path.lineTo(this.getWidth() / 2 + rectWidth, rectPointerHeight + rectTriangleHeight);
        path.lineTo(this.getWidth() / 2 - rectWidth, rectPointerHeight + rectTriangleHeight);
        path.close();
        canvas.drawPath(path, mPaint);
    }


    private void drawRect(RectangleItem rectangleItem, Canvas canvas) {
        mPaint.setColor(mContext.getColor(rectangleItem.rectColor));
        int alpha = rectangleItem.getRectAlpha();
        mPaint.setAlpha(alpha);
        canvas.drawRect(rectangleItem.rect, mPaint);
    }

    private void changeColor() {
        for (RectangleItem rectangleItem : mRectangleItems) {
            if (rectangleItem.getRectColor() == R.color.wheel_rectangle_white) {
                rectangleItem.setRectColor(R.color.wheel_rectangle_black);
            } else {
                rectangleItem.setRectColor(R.color.wheel_rectangle_white);
            }
        }
        invalidate();
    }

    private void checkPosition() {
        int size = mRectangleItems.size();
        int mid = size / 2 + 1;
        if (mRectangleItems.get(mid).getRectColor() == R.color.wheel_rectangle_black) {
            changeColor();
        }
    }

    public interface UpdateStarightenListener{
        public void updateStrarghtenByAngle(int angle);
    }

    public void setUpdateStarightenListener(UpdateStarightenListener listener){
        mUpdataStraightenListener = listener;
    }

    private void updateAngle(int straightenCount){
        mTitleText = String.valueOf(straightenCount) + "°";//bug:A6001-1506-huangjian-001 20170223 modify
        //bug:A6000-5151-huangjian-001 20170227 add begin
        if (straightenCount == LEFT_STRAIGHTENANGLE_MAX || straightenCount == RIGHT_LEFT_STRAIGHTENANGLE_MAX) {
            invalidate();
        }
        //bug:A6000-5151-huangjian-001 20170227 add end
        if (mUpdataStraightenListener == null) return;
        mUpdataStraightenListener.updateStrarghtenByAngle(straightenCount);
    }

    public void resetStraightenText() {
        mTitleText = String.valueOf(0) + "°";//bug:A6001-1506-huangjian-001 20170223 modify
        invalidate();
    }

    private  boolean useCompact(Context context) {
        return mContext.getResources().getConfiguration().orientation
                == Configuration.ORIENTATION_PORTRAIT;
    }

    private void initWheelProperty(float width){
        if (ScreenUtils.isHightResolutionSlab(mContext)) {
            rectPointerHeight = 100;
            rectTriangleHeight = 20;
            rectWidth = 6;
            rectHeight = 100;
        } else {
            rectPointerHeight = 70;
            rectTriangleHeight = 10;
            rectWidth = 4;
            rectHeight = 70;
        }
        //bug:A6001-1542-huangjian-001 20170318 add begin
        float titleHeight = width / 4 + rectWidth * 6 - rectWidth / 2;
        float trianleHeight = rectPointerHeight + rectTriangleHeight;
        if (titleHeight > trianleHeight) {
            heightGap = 0;
        }  else {
            heightGap = trianleHeight - titleHeight;
        }
        //bug:A6001-1542-huangjian-001 20170318 add end
    }

    private class RectangleItem {

        private Rect rect = null;
        private int rectColor = R.color.wheel_rectangle_white;
        private int rectAlpha = 100;

        private int getRectColor() {
            return rectColor;
        }

        private void setRectColor(int rectColor) {
            this.rectColor = rectColor;
        }

        private int getRectAlpha() {
            return rectAlpha;
        }

        private void setRectAlpha(int rectAlpha) {
            this.rectAlpha = rectAlpha;
        }

        private Rect getRect() {
            return rect;
        }

        private void setRect(Rect rect) {
            this.rect = rect;
        }
    }
}
